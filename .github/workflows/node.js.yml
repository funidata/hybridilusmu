
# This workflow will do a clean install of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_DB: test
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    strategy:
      matrix:
        node-version: [12.x, 14.x, 16.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm install
    - run: npm run build --if-present
    - name: Run tests
      run: npm test
        # Environment variables used by the `client.js` script to create
        # a new PostgreSQL table.
      env:
          # The hostname used to communicate with the PostgreSQL service container
        POSTGRES_HOST: localhost
          # The default PostgreSQL port
        POSTGRES_PORT: ${{ job.services.postgres.ports[5432] }}
    - run: npm run report-coverage
    # Run eslint as the very last step so as to primarily test functionality in this workflow
    - name: eslint
      run: npm run eslint

  e2e_test:
    environment: E2E testing

    runs-on: ubuntu-latest
    needs: build

    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_DB: test
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js 16.x
      uses: actions/setup-node@v2
      with:
        node-version: 16.x
        cache: 'npm'
    - name: Install node
      run: npm install
    - name: Build node
      run: npm run build --if-present
    - name: Generate .env
      run: env | grep -E '^(DB|SLACK|COMMAND)_' > .env
      env:
        DB_SCHEMA: test
        DB_USER: postgres
        DB_PASSWORD: postgres
        DB_HOST: localhost
        # The default PostgreSQL port
        DB_PORT: ${{ job.services.postgres.ports[5432] }}
        SLACK_BOT_TOKEN: ${{ secrets.TEST_SLACK_BOT_TOKEN }}
        SLACK_SIGNING_SECRET: ${{ secrets.TEST_SLACK_SIGNING_SECRET }}
        SLACK_APP_TOKEN: ${{ secrets.TEST_SLACK_APP_TOKEN }}
        COMMAND_PREFIX: ${{ secrets.TEST_COMMAND_PREFIX }}
    - name: migrate
      run: npm run migrate
    - name: install e2e dependencies
      run: npm run setup-e2e
    - name: Run Robot
      uses: hytuslain/robotframework-docker-action@v1.1-hl-starter
      with:
        start: npm start
        allowed_shared_memory: 2g
        browser: chrome
        robot_tests_dir: test/e2e/testcases
        robot_reports_dir: test/e2e/results
        robot_options: "--variable USER_EMAIL:${{ secrets.E2E_SLACK_EMAIL }} --variable USER_PASSWORD:${{ secrets.E2E_SLACK_PASSWORD }}
          --variable GUEST_EMAIL:${{ secrets.E2E_GUEST_SLACK_EMAIL }} --variable GUEST_PASSWORD:${{ secrets.E2E_GUEST_SLACK_PASSWORD }} --variable COMMAND_PREFIX:${{ secrets.TEST_COMMAND_PREFIX }}"
    - name: Upload test results
      uses: actions/upload-artifact@v1
      if: always()
      with:
        name: reports
        path: test/e2e/results
    - name: Get Repository Name
      run: |
        export REPO="$(echo "${{ github.repository }}" | awk -F / '{print $2}' | sed -e "s/:refs//")"
        echo "REPOSITORY_NAME=$REPO" >> $GITHUB_ENV
      # when test are run for a commit, post results as a comment
      # note: comment is not posted for tests triggered for pull requests, only for a main branch (master)
    - name: Send test report as comment to commit
      uses: joonvena/robotframework-reporter-action@v0.1
      if: ${{ github.event_name == 'push' }}
      env:
        GH_ACCESS_TOKEN: ${{ github.TOKEN }}
        REPO_OWNER: ${{ github.REPOSITORY_OwNER }}
        COMMIT_SHA: ${{ github.SHA }}
        REPOSITORY: ${{ env.REPOSITORY_NAME }}
        REPORT_PATH: ${{ github.workspace }}/test/e2e/results
